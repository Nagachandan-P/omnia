# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- name: Install login packages
  ansible.builtin.package:
    name: "{{ slurm_login_packages[ansible_os_family] }}"
    state: present

- name: Remove PATH env variable
  community.general.ini_file:
    path: "{{ sys_env_path }}"
    option: PATH
    state: absent
    mode: "{{ conf_file_mode }}"

- name: Set env variable
  community.general.ini_file:
    path: "{{ sys_env_path }}"
    option: SLURM_CONF
    value: "{{ slurm_share_prefix }}{{ slurm_config_dir }}/slurm.conf"
    no_extra_spaces: true
    mode: "{{ conf_file_mode }}"

- name: Enable srun port range
  ansible.posix.firewalld:
    port: "{{ item }}/tcp"
    permanent: true
    zone: public
    state: enabled
    immediate: true
  loop:
    - "{{ slurm_conf_dict['SrunPortRange'] }}"

- name: Login node configless
  when: slurm_installation_type == configless_slurm
  block:
    - name: Get slurm conf from controller # HA
      ansible.posix.synchronize:
        src: "{{ slurm_share_prefix }}{{ slurm_config_dir }}/slurm.conf"
        dest: "{{ slurm_share_prefix }}{{ slurm_config_dir }}/"
        mode: push
        checksum: true
      delegate_to: "{{ groups['slurm_control_node'] | first }}"

    # Below is slurmd daemon install as per slurm guide
    - name: Install compute packages
      ansible.builtin.package:
        name: "{{ slurm_compute_packages[ansible_os_family] }}"
        state: present

    - name: Enable SlurmdPort
      ansible.posix.firewalld:
        port: "{{ item }}/tcp"
        permanent: true
        zone: public
        state: enabled
        immediate: true
      loop:
        - "{{ slurm_conf_dict['SlurmdPort'] }}"

    - name: Enable the service
      ansible.builtin.service:
        name: slurmd
        enabled: true
      register: slurmd_service

    - name: Get service path
      ansible.builtin.set_fact:
        slurmd_service_path: "{{ slurmd_service['status']['FragmentPath'] | default(slurmd_service_default_path) }}"

    - name: Edit the service ConditionPathExists
      community.general.ini_file:
        path: "{{ slurmd_service_path }}"
        section: Unit
        option: ConditionPathExists
        owner: "{{ root_user }}"
        group: "{{ root_group }}"
        mode: "{{ conf_file_mode }}"
        state: absent

    - name: Edit the service ExecStart
      community.general.ini_file:
        path: "{{ slurmd_service_path }}"
        section: Service
        option: ExecStart
        owner: "{{ root_user }}"
        group: "{{ root_group }}"
        mode: "{{ conf_file_mode }}"
        value: "/usr/sbin/slurmd -D
         --conf-server {{ (hostvars[groups['slurm_control_node'] | first])['inventory_hostname_short']
         + ':' + (slurm_conf_dict['SlurmctldPort'] | string) }} -s $SLURMD_OPTIONS" # HA

    - name: Reload slurmd # No handlers as not slurmd
      ansible.builtin.systemd_service:
        name: slurmd
        state: reloaded
        daemon_reload: true
        enabled: true
      when: restart_slurm_services

    - name: Restart slurmd
      ansible.builtin.systemd_service:
        name: slurmd
        state: restarted
      when: restart_slurm_services

- name: Remove local slurm.conf for nfs
  ansible.builtin.file:
    path: "/{{ slurm_config_dir }}/slurm.conf"
    state: absent
    mode: "{{ slurm_mode }}"
  when: slurm_installation_type == nfs_share_slurm

- name: Enable etc enviroment
  ansible.builtin.shell: source {{ sys_env_path }} # noqa: command-instead-of-shell
  changed_when: false
