# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#!/bin/sh

sleep 10

pcs property set stonith-enabled=false
pcs property set no-quorum-policy=ignore

pcs resource defaults update migration-threshold={{ migration_threshold }}
pcs resource defaults update failure-timeout={{ failure_timeout }}

{% if hostvars['localhost']['enable_oim_ha'] %}
pcs resource create admin_VIP ocf:heartbeat:IPaddr2 \
        ip={{ hostvars['localhost']['oim_ha_data'].ansible_facts.oim_ha.admin_virtual_ip_address }} nic={{ admin_nic }} cidr_netmask={{ hostvars['localhost']['network_data'].admin_network.netmask_bits }} \
        op monitor interval={{ monitor_interval }}

pcs resource group add {{ vip_group }} admin_VIP

{% if hostvars['localhost']['oim_ha_data'].ansible_facts.oim_ha.bmc_virtual_ip_address is defined and hostvars['localhost']['oim_ha_data'].ansible_facts.oim_ha.bmc_virtual_ip_address | length > 1 %}
pcs resource create bmc_VIP ocf:heartbeat:IPaddr2 \
        ip={{ hostvars['localhost']['oim_ha_data'].ansible_facts.oim_ha.bmc_virtual_ip_address }} nic={{ admin_nic }} cidr_netmask={{ hostvars['localhost']['network_data'].admin_network.netmask_bits }} \
        op monitor interval={{ monitor_interval }}
pcs resource group add {{ vip_group }} bmc_VIP
{% endif %}
pcs resource defaults update migration-threshold={{ ha_migration_threshold }}
{% endif %}

# Initialize the total sleep time
total_sleep_time=0
# Loop for a maximum of three minutes
max_iterations=18
for ((i=0; i<max_iterations; i++)); do
    # Check if any pcs resources are stopped
    if pcs resource | grep "Stopped\|FAILED"; then
        # If any resources are stopped, sleep for 10 seconds
        echo "Sleeping for 10 seconds. Total sleep time: $total_sleep_time seconds."
        sleep 10
        total_sleep_time=$((total_sleep_time + 10))
    else
        # If all resources are running, exit the loop
        break
    fi
done

# Create a file which signifies the pcs resources were created.
# This file also contains the resources and its state which ansible can check against.
echo "$(date): PCS Cluser Has Been Created"
pcs resource | awk -F' ' '{print $2 " " $4}' | sed 's/^\s*//;s/\s*$//' > {{ pcs_start_container_finished }}
